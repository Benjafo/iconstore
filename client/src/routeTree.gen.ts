/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'

// Create Virtual Routes

const AuthLazyImport = createFileRoute('/auth')()
const IndexLazyImport = createFileRoute('/')()
const AuthenticatedLazyImport = createFileRoute('/_authenticated')()
const AuthenticatedDashboardLazyImport = createFileRoute('/_authenticated/dashboard')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index').then((d) => d.Route))

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  path: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_authenticated').then((d) => d.Route))

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: '/_authenticated/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() => import('./routes/_authenticated/dashboard').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: '/_authenticated'
      fullPath: '/_authenticated'
      preLoaderRoute: typeof AuthenticatedLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardLazyImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByPath
  fullPaths: '/' | '/_authenticated' | '/auth' | '/dashboard'
  fileRoutesByPath: FileRoutesByPath
  fileRoutesById: FileRoutesById
}

interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/auth': typeof AuthRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  AuthRoute: typeof AuthRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  AuthRoute: AuthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileChild(AuthenticatedDashboardRoute, AuthenticatedRoute)

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/dashboard"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx"
    }
  }
}
ROUTE_MANIFEST_END */